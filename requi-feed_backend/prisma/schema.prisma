generator client {

  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id       Int     @id @default(autoincrement())
    nombre   String
    apellido String
    ocupacion String
    area     String
    foto     String?
    grupo    Grupo?   @relation(fields: [grupoId], references: [id])
    grupoId  Int?
    cuenta   Cuenta? @relation(fields: [cuentaId], references: [id])
    cuentaId Int?    @unique
}

model Rol {
    id   Int     @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    tipo TipoRol

    Cuenta Cuenta[]
}

model Cuenta {
    id             Int      @id @default(autoincrement())
    external_id String @default(uuid()) @unique 
    fechaCreacion  DateTime @default(now())
    email          String   @unique
    contrasenia    String
    estado         String?
    usuario        Usuario? 
    Rol Rol @relation(fields: [rolId], references: [id])
    rolId Int
}

model PeriodoAcademico {
    id               Int     @id @default(autoincrement())
    nombre           String
    PeriodoAcademico String
    modalidad        String?

    grupos Grupo[]
}

model Grupo {
    id                 Int              @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    nombre             String?
    descripcion        String?
    idPeriodoAcademico Int
    periodoAcademico   PeriodoAcademico @relation(fields: [idPeriodoAcademico], references: [id])

    usuarios  Usuario[]
    proyectos Proyecto[]
}

model Proyecto {
    id             Int            @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    nombre         String
    descripcion    String
    fechaCreacion  DateTime       @default(now())
    estado         EstadoProyecto
    requisitos     Requisito[]
    grupoId        Int
    grupo          Grupo          @relation(fields: [grupoId], references: [id])
    calificacion   Calificacion?  @relation(fields: [calificacionId], references: [id])
    calificacionId Int? @unique

}

model Requisito {
    id              Int             @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    numeroRequisito String
    tipo            TipoRequisito
    estado          EstadoRequisito
    proyectoId      Int
    proyecto        Proyecto        @relation(fields: [proyectoId], references: [id])

    detalleRequisito DetalleRequisito[]
}

model DetalleRequisito {
    id              Int       @id @default(autoincrement())
    nombreRequisito String
    prioridad       Prioridad
    descripcion     String
    version         String
    fechaCreacion   DateTime  @default(now())

    requisitoId Int
    requisito   Requisito @relation(fields: [requisitoId], references: [id])

    Revision Revision[]
}

model Revision {
    id          Int      @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    fechaLimite DateTime?
    tipo               TipoRevision
    detalleRequisitoId Int
    detalleRequisito   DetalleRequisito @relation(fields: [detalleRequisitoId], references: [id])
    Comentario         Comentario[]
}

model Comentario {
    id          Int      @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    fecha       DateTime @default(now())
    descripcion String
    revisionId  Int
    revision    Revision @relation(fields: [revisionId], references: [id])
}

model Calificacion {
    id         Int    @id @default(autoincrement())
    external_id String @default(uuid()) @unique
    puntuacion Float
    comentario String?
    Proyecto Proyecto? 
}

enum EstadoRequisito {
    NUEVO
    BORRADOR
    EN_REVISION
    OBSERVADO
    LISTO
    ACEPTADO
    APROBADO
}

enum EstadoProyecto {
    ACTIVO
    INACTIVO
    FINALIZADO
}

enum TipoRequisito {
    FUNCIONAL
    NO_FUNCIONAL
}

enum TipoRevision {
    INTERNA
    EXTERNA
}

enum TipoRol {
    ANALISTA
    DOCENTE
    OBSERVADOR
    LIDER
}

enum Prioridad {
    ALTA
    MEDIA
    BAJA
}
